python support functional, oops and procedure oriented approach

object have attributes(data or variable) & behaviour(method or function)
fn in oops called methods
class = design for the object - blue print
object = Instance 

way of calling:
class abc:
    def fn(self):
        print("I am class A")
        
        
ob = abc()
ox = abc()

abc.fn(ob)
ox.fn()

__init__(self) :similar to constructor - method to initialize the variable - automatically called once obj created


size of an object ? - depend upon the no. of variables
who allocate the size of object ? - constructor

in oops two types of variable: 
1) class or static variable 
2) instance variable

in oops three types of methods: 
1) class method 	- want to use class var, use class method
2) static method 	- when no concern with the variable that time use static method
3) instance method (- Accessor methods(getter - only set the val) - mutator methods(setter - only set the val))

class A:
    
#     class or static variable modify by class thn only reflect all objects A.school = 'PARISAR'
    school = 'NALANDA'
    
    def __init__(self,m1,m2,m3):
#        instance variable
        self.m1 = m1                  
        self.m2 = m2
        self.m3 = m3
        
#     instance method    
    def avg(self):                            
        return ((self.m1 + self.m2 + self.m3) / 3)
    
#     instance - getter method - accessor method
    def get_m1(self):
        return self.m1
    
# instance - setter method - mutator method
    def set_m1(self,val):
        self.m1 = val
        
#  class method    
    @classmethod    
    def get_school(cls):
        return cls.school
    
#     static method
    @staticmethod
    def info():
        print('This is static method')
        
ob = A(35,35,35)

print(ob.avg())

print(A.get_school())
print(ob.get_school())

A.info()
ob.info()

Class and Object:


__init__method in python
constructor, self and comparing objects
Types of variable
Types of methods
Inner class


Inheritance 
Constructor in Inheritance


Polymorphism:
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.

Ways to acheive polymorphism mechanism:
- Duck Typing (Interface)
class a:
    def execute(self):
        print('Hello')
        print('World')
        
class b:
    def fnb(self,ide):
        ide.execute()
        
        
class c:
    def execute(self):
        print('Suraj')
        print('Vanza')
        
        
oba = a()
obb = b()
obc = c()

obb.fnb(oba)
obb.fnb(obc)


- Operator Overloading
class a:
    def __init__(self,m1,m2):
        self.m1 = m1
        self.m2 = m2
        
    def __add__(self,other):
        x = self.m1 + other.m1
        y = self.m2 + other.m2
        
        s = a(x,y)
        
        return (s)
    
    def __gt__(self,other):
        p = self.m1+self.m2
        q = other.m1+other.m2
        
        if p>q:
            return True
        else:
            return False
        
        
ob = a(5,6)
ox = a(7,8)

sw = ob+ox

print(sw.m1, sw.m2)

if ob>ox:
    print('OB win')
else:
    print('OX win')

- Method Overloading
	not possible in python but can achieve using *args/*kwargs
	class x:
    
    def fn(self,a,*args):
        t = a
        for i in args:
            t = t+i
        return t
    
ob = x()

print(ob.fn(1,2))
print(ob.fn(1,2,3))
print(ob.fn(1,2,3,4))


- Method Overriding
class a:
    def fn(self):
        print('class a')
        
class b(a):
    def fn(self):
        print('class b')
    
    
ob = b()

ob.fn()



Data abstraction in python and data encapsulation in python programming are related to each other. 
The main point that is necessary here to note is that data abstraction is only possible to achieve through encapsulation.

Encapsulation means storing or placing data in a single place to make it easily readable and compact in one place. 
Whereas data abstraction in python programming means to hide internal functionalities 
that are performing on the application using codes and to show only essential information (class attributes).


Encapsulation
Abstraction
